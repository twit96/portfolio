---
/**
 * NOTE: This page is a duplicate of the content
 * that would be generated by the /tags/[tag]/1/ page.
 * The PaginationButtons component explicitly links to page 1,
 * whereas all other links link to the unpaginated URL.
 * The paginated page 1 is given a meta robots noindex tag.
*/


import { getCollection } from 'astro:content';
import PostCollectionLayout from '@layouts/PostCollectionLayout.astro';
import { SITE_AUTHOR, POSTS_PER_PAGE } from '@consts';
import NothingHereCard from '@components/PostPreviewCard/NothingHereCard.astro';
import CompactPreviewCard from '@components/PostPreviewCard/CompactPreviewCard.astro';
import PaginationButtons from '@components/PaginationButtons.astro';


export async function getStaticPaths() {

  // Get All Posts
	const publishedPosts = (await getCollection('posts')).filter(post => !post.data.hidden);
  
  // Sort by Date Descending
  publishedPosts.sort(function(a, b) {
    let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
    let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
    if (b_date > a_date) return 1;
    if (a_date > b_date) return -1;
    return 0;
  });

  // Get All Unique Post Tags
  const uniqueTags = [...new Set(publishedPosts.map(post => post.data.tags).flat())];
  const allTagInfo = await getCollection('tagInfo');

  // Generate a page for each category
  return uniqueTags.flatMap(ut => ({
    params: { tag: ut },
    props: {
      tagInfo: allTagInfo.filter(ti => { return ti.slug===ut })[0] || {}  // 0th index since return is array
    },
  }));
}


const tag:string = Astro.params.tag!;
const { tagInfo } = Astro.props;

// Get Tagged Posts
const publishedPosts = (await getCollection('posts')).filter(post => !post.data.hidden);
let taggedPosts = publishedPosts.filter(post => (
  post.data.tags && post.data.tags.includes(tag)
));

// Sort by Date Descending
taggedPosts.sort(function(a, b) {
	let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
  let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
  if (b_date > a_date) return 1;
  if (a_date > b_date) return -1;
  return 0;
});

// build fake page object for numPosts parameter and PaginationButtons component
let page = {
  currentPage: 1,
  lastPage: Math.ceil(taggedPosts.length / POSTS_PER_PAGE),
  total: taggedPosts.length,
};

// Get Tag Info if it Exists
const { Content } = (Object.keys(tagInfo).length > 0) 
  ? await tagInfo.render()  // render tag info if it exists
  : { Content: null };      // default to null value when no tag info exists
---

<PostCollectionLayout
  noIndex={page.currentPage===1}
  hasBreadcrumbs={true}
	title={`#${tag}`}
  description={`${SITE_AUTHOR}'s posts tagged with #${tag}`}
	numPosts={page.total}
>

  {
    Content &&
    <div
      slot="info"
      class="collection-info content-section"
    >
      <Content />
    </div>
  }

  <div
    slot="content"
    class="content-section"
  >

    <ul class="layout layout--grid">
      {
        taggedPosts.length > 0 
        ? taggedPosts.map((post, i) => 
          <li>
            <CompactPreviewCard post={post} />
          </li>
        )
        : <li>
            <NothingHereCard />
          </li>
      }
    </ul>

    <PaginationButtons
      page={page}
      baseUrl={Astro.url.pathname.split('/').filter(Boolean).join('/')}
    />

  </div>
</PostCollectionLayout>
