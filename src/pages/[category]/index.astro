---
/**
 * NOTE: This page is a duplicate of the content
 * that would be generated by the [category]/1/ page.
 * We redirect from [category]/[page]/ to this page when page===1.
 * The effect of this is that the first page of each category has no page number. 
*/


import { getCollection } from 'astro:content';
import PostCollectionLayout from '@layouts/PostCollectionLayout.astro';
import { SITE_AUTHOR, POSTS_PER_PAGE } from '@consts';
import ExpandedPreviewCard from '@components/PostPreviewCard/ExpandedPreviewCard.astro';
import CompactPreviewCard from '@components/PostPreviewCard/CompactPreviewCard.astro';
import NothingHereCard from '@components/PostPreviewCard/NothingHereCard.astro';
import PaginationButtons from '@components/PaginationButtons.astro';


export async function getStaticPaths() {
	
  // Get All Posts
	const publishedPosts = (await getCollection('posts')).filter(post => !post.data.hidden);
  
  // Sort by Date Descending
  publishedPosts.sort(function(a, b) {
    let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
    let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
    if (b_date > a_date) return 1;
    if (a_date > b_date) return -1;
    return 0;
  });

  // Get Categories
  const allCategories: String[] = publishedPosts.map(post => post.data.category).flat().sort();
  const uniqueCategories = [
    "Archive",                 // "Archive" category will show all posts
    ...new Set(allCategories)  // exclude duplicates from all categories
  ];
  
  // Generate a page for each category
	return uniqueCategories.flatMap(uc => ({
		params: { category: uc.toLowerCase() },
    props: { formattedCategory: uc },
	}));
}


const { category } = Astro.params;
const { formattedCategory } = Astro.props;

// Get Categorized Posts
let publishedPosts = (await getCollection('posts')).filter(post => !post.data.hidden);
let categorizedPosts = 
  (category==="archive") 
    ? publishedPosts 
    : publishedPosts.filter(post => post.data.category.toLowerCase()===category);

// Sort by Date Descending
categorizedPosts.sort(function(a, b) {
	let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
  let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
  if (b_date > a_date) return 1;
  if (a_date > b_date) return -1;
  return 0;
});

// build fake page object for numPosts parameter and PaginationButtons component
let page = {
  currentPage: 1,
  lastPage: Math.ceil(categorizedPosts.length / POSTS_PER_PAGE),
  total: categorizedPosts.length,
};

// truncate posts to first page results length
if (categorizedPosts.length > POSTS_PER_PAGE) categorizedPosts.length = POSTS_PER_PAGE;

---
<PostCollectionLayout
  title={formattedCategory}
  description={`${SITE_AUTHOR}'s ${category}`}
  hasCategoriesNav={true}
  numPosts={page.total}
>
  <div
    slot="content"
    class="content-section"
  >
    
    {/* No Posts - Nothing Here Card */}
    {
      (categorizedPosts.length === 0) &&
      <NothingHereCard />
    }

    {/* Most Recent Post - Large Card */}
    {
      categorizedPosts.length > 0 &&  // if there are any posts
      <ExpandedPreviewCard post={categorizedPosts[0]} />
    }
    
    {/* Posts 2+ - Medium Card */}
    {
      categorizedPosts.length > 1 &&
      <ul class="layout layout--grid">
        {
          categorizedPosts.map((post, i) => (
            i>0 && 
            <li>
              <CompactPreviewCard post={post} />
            </li>
          ))
        }
      </ul>
    }

    <PaginationButtons
      page={page}
      baseUrl={Astro.url.pathname.split('/').filter(Boolean).join('/')}
    />
  </div>

</PostCollectionLayout>
