---
import DecorativeLine from '@components/DecorativeLine/index.astro';


const { page, baseUrl } = Astro.props;


// Buttons Array Presets
/*
How many numbered buttons are visible.
Should be odd so current page indicator is centered,
but also because last page button will not display when current page number = page.lastPage+1-outerBtnThreshold.
This will not break anything, but is not intended behavior.
Thus, a check is run below to force an odd number on the value.
*/
let pageBtnsLength = 5;
if (pageBtnsLength%2===0) pageBtnsLength++;
/*
The number of pages away from the first or last page 
required for the first page button and last page button to be visible
*/
const outerBtnThreshold = Math.ceil( (pageBtnsLength+1)/2 );


// Build Pagination Buttons Array
let pageBtns: Number[] = [];

if (page.lastPage-1 < pageBtnsLength) {
  for (let i=1; i<=page.lastPage; i++) pageBtns.push(i);
  
} else {
  pageBtns.push(page.currentPage);  // init with current page

  let adder=1;
  let multiplier=1;

  while (pageBtns.length<pageBtnsLength) {
    multiplier*=-1;

    const curr = page.currentPage + (adder * multiplier);
    if (1 <= curr && curr <= page.lastPage) {

      if (1 <= curr && curr < page.currentPage) pageBtns = [curr].concat(pageBtns)
      else if (page.currentPage < curr && curr <= page.lastPage) pageBtns.push(curr);

    }
    if (multiplier>0) adder++;
  }
}
---

{
  page.lastPage>1 &&
  <DecorativeLine />
  <nav aria-label="Pagination Navigation">
    <ul
      class="btns layout layout--flex-fill"
      style="--_layout--base-size:auto; --_layout--gap:0.125rem;"
    >

      {/* First Page Button */}
      {
        (page.lastPage > pageBtnsLength) &&
        (page.currentPage > outerBtnThreshold) &&
        <li>
          <a
            class="btn surface2"
            href={`/${baseUrl}/`}
            title="Navigate to first page"
          >1</a>
        </li>
        <li><span class="btn surface1">...</span></li>
      }

      {/* Nearby Pages Buttons */}
      {
        pageBtns.map((p) =>
        (p === page.currentPage)
        ? <li class="btn surfaceAction"><span>{page.currentPage}</span></li>
        : <li>
            <a
              class="btn surface2"
              href={`/${baseUrl}/${p}/`}
              title={`Navigate to page ${p}`}
            >{p}</a>
          </li>
        )
      }

      {/* Last Page Button */}
      {
        (page.lastPage > pageBtnsLength) &&
        (page.currentPage < page.lastPage+1-outerBtnThreshold) &&
        <li><span class="btn surface1">...</span></li>
        <li>
          <a
            class="btn surface2"
            href={`/${baseUrl}/${page.lastPage}/`}
            title="Navigate to last page"
          >{page.lastPage}</a>
        </li>
      }

    </ul>
  </nav>
}


<style>
  nav {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    max-width: 80ch;
    margin: auto;
    text-align: center;
  }
  nav li > * { display: block; }

  @media (min-width: 90ch) {
    nav {
      flex-direction: row;
      gap: 1rem;
    }
    nav > * { flex: 1; }
  }
</style>
