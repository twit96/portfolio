<script is:inline>

// Put Reused, Globally Accessible JavaScript Here.

/**
 * Throttle:
 * Fire a function once every set number of milliseconds
 * during a burst of calls.
 * 
 * (Fires at the end of each timeout period instead of the beginning
 * to ensure bursts shorter than the timeout delay will trigger a fire).
*/
const throttle = (func, delay) => {
	let inProgress = false;
	return (...args) => {
		if (inProgress) {
			return;
		}
		inProgress = true;
		setTimeout(() => {
			func(...args);
			inProgress = false;
		}, delay);
	}
};

/**
 * Debounce:
 * Fire a function exactly once after a set delay (in milliseconds)
 * at the end of a burst of calls.
*/
/*
const debounce = (func, delay) => {
	let timerId;
	return (...args) => {
		clearTimeout(timerId);
		timerId = setTimeout(func, delay, [...args]);
	};
};
*/

</script>
