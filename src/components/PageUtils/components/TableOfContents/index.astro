---
import '@styles/toc.css';

import TableOfContentsBackground from "./components/TableOfContentsBackground.astro";
---
<details
  class="btns shadow-sm"
  id="toc"
>

  <summary>
    <span style="display:none;">Table of Contents</span>
    <span 
      class="svg-wrap btn surfaceAction"
      title="Table of Contents"
    >
      <svg
        width="2.5rem"
        height="2.5rem"
        viewBox="0 0 24 24"
        stroke-width="0"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M3 9h14V7H3v2m0 4h14v-2H3v2m0 4h14v-2H3v2m16 0h2v-2h-2v2m0-10v2h2V7h-2m0 6h2v-2h-2v2Z"/>
      </svg>
      <svg
        height="2.5rem"
        viewBox="0 0 384 512"
        width="2.5rem"
        xmlns="http://www.w3.org/2000/svg" 
      >
        <!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
        <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" />
      </svg>
    </span>
  </summary>

  <div
    class="card custom-scrollbar layout layout--list modal shadow-sm surface1"
    id="toc-content"
    style="--_layout--gap:0.5rem;"
  >
    <h2>Table of Contents</h2>
    {/* toc nav auto-generated and injected here by page script */}
  </div>

</details>
<TableOfContentsBackground />


<style>

  summary {
    line-height: 0;
    list-style: none;
  }

  .svg-wrap {
    display: block;
    padding: 0.5em;
    position: relative;
    z-index: 1;
  }
  @media (hover: hover) {
    .svg-wrap:hover { filter: var(--hover-filter); }
  }
  .svg-wrap svg {
    --size: 2.5rem;
    fill: currentColor;
    height: var(--size);
    width: var(--size);
  }
  .svg-wrap > :last-child { display: none; }
  details[open] .svg-wrap > :first-child { display: none; }
  details[open] .svg-wrap > :last-child { display: initial; }
  
  .modal {
    max-height: calc(100svh - 10.25rem);
    max-width: calc(100svw - 3rem);
    padding: 0.5rem;
    top: 4.75rem;
    width: 60ch;
    z-index: 1;
  }
  @media (orientation: landscape) {
    .modal {
      max-height: calc(100svh - 6.75rem);
      max-width: calc(100svw - 10rem);
    }
  }

  h2 { text-align: center; }

</style>


<script>

  function configTOC() {

    const toc = document.getElementById("toc-content");
    if (!toc) return false;


    function identifyHeadings() {
      // Identify all headings in the article
      let article_text = document.getElementsByTagName("article")[0];
      if (!article_text) return false;

      for (let i=2; i<=6; i++) {
        let headings = article_text.getElementsByTagName('h'+i);
        for (let j=0; j<headings.length; j++) {
          headings[j].className = 'h';
        }
      }
    }
    identifyHeadings();
    

    let headings = document.getElementsByClassName('h');
    if (!headings) return false;

    
    function buildTocWrap(toc: Element) {
      // nav
      let toc_nav = document.createElement("nav");
      toc_nav.setAttribute('aria-label', 'Page Table of Contents');
      toc_nav.classList.add("card", "custom-scrollbar", "shadow-sm", "surface0");
      toc_nav.id = "toc-nav";
      toc.appendChild(toc_nav);
      // ul
      let toc_nav_ul = document.createElement("ul");
      toc_nav_ul.classList.add("layout", "layout--list");
      toc_nav_ul.id = "toc-nav-ul";
      toc_nav_ul.style.setProperty("--_layout--gap", "0.5rem");
      toc_nav.appendChild(toc_nav_ul);
    }
    buildTocWrap(toc);


    function createLink(h: Element) {
      let h_link = document.createElement('a');
      h_link.href = '#' + h.id;
      h_link.onclick = () => { document.getElementById("toc")?.removeAttribute("open"); };
      h_link.innerHTML = h.innerHTML;
      return h_link;
    }


    function parseInnerHtml(in_html: String) {
      let return_str = '';

      // remove html tag data if it exists
      let skip = 0;
      for (const char of in_html) {
        if (char === "<") skip++;
        else if (char === ">" && skip > 0) skip--;
        else if (skip===0) return_str += char;
      }
      
      // regex remove disallowed URI characters
      return_str = return_str.replace(/[`~!@#$%^&*()|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '')

      // replace spaces with underscores and format output
      return_str = return_str.split(' ').join('_').toLowerCase();

      return return_str;
    }

    
    let unique_ids = {};
    function addUniqueHeadingId(h: Element) {
      let h_id = parseInnerHtml(h.innerHTML);
      unique_ids[h_id] = (unique_ids[h_id] + 1 || 0);
      (unique_ids[h_id]==0) ? (h.id=h_id) : (h.id=h_id+"_"+unique_ids[h_id]);
      return h;
    }
    

    for (let i=0; i<headings.length; i++) {
      let h = headings[i];
      
      h = addUniqueHeadingId(h);  // config heading id
      let h_link = createLink(h);  // build anchor link

      // add link to table of contents
      let li = document.createElement("li");
      li.classList.add("toc-link-wrap", `toc-link-wrap--${h.tagName.replace("H", "h")}`);
      li.appendChild(h_link);
      document.getElementById("toc-nav-ul")?.appendChild(li);
    }

    // remove identifying class from headings
    while (headings.length > 0) {
      let h = headings[0];
      h.className = h.className.replace('h', '');
    }

  }
  configTOC();

</script>
