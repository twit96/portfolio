---
import { getCollection } from 'astro:content';
import PostCollectionLayout from '@layouts/PostCollectionLayout.astro';
import { SITE_AUTHOR, POSTS_PER_PAGE } from '@consts';
import NothingHereCard from '@components/PostPreviewCard/NothingHereCard.astro';
import ExpandedPreviewCard from '@components/PostPreviewCard/ExpandedPreviewCard.astro';
import CompactPreviewCard from '@components/PostPreviewCard/CompactPreviewCard.astro';
import PaginationButtons from '@components/PaginationButtons.astro';


export async function getStaticPaths({ paginate }) {
	let publishedPosts = (await getCollection('posts')).filter(post => !post.data.draft && !post.data.archived);
  // Sort by Date Descending
  publishedPosts.sort(function(a, b) {
    let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
    let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
    if (b_date > a_date) return 1;
    if (a_date > b_date) return -1;
    return 0;
  });

  const allCategories: String[] = publishedPosts.map((post) => post.data.category).flat().sort();
  const uniqueCategories = [...new Set(allCategories)];
  
  return uniqueCategories.flatMap((uc) => {

    let categorizedPosts = publishedPosts.filter(post => post.data.category===uc);

    const category = uc.toLowerCase();
    const formattedCategory = uc;

    return paginate(categorizedPosts, {
      params: { category },
      props: { formattedCategory },
      pageSize: POSTS_PER_PAGE
    });
  });
}

const category = Astro.params.category;
const formattedCategory = Astro.props.formattedCategory;
const page = Astro.props.page;
const categorizedPosts = Astro.props.page.data;
---

<PostCollectionLayout
	title={formattedCategory}
  description={`${SITE_AUTHOR}'s ${category}`}
	numPosts={page.total}
>
  <div
    slot="content"
    class="content-section"
  >

  
    {/* No Posts - Nothing Here Card */}
    {
      (categorizedPosts.length === 0) &&
      <NothingHereCard />
    }


    {/* Most Recent Post - Large Card */}
    {
      categorizedPosts.length > 0 &&
      <ExpandedPreviewCard post={categorizedPosts[0]} />
    }
    

    {/* Posts 2+ - Medium Card */}
    {
      categorizedPosts.length > 1 &&
      <ul class="layout layout--grid">
        {
          categorizedPosts.map((post, i) => (
            i>0 &&
            <li>
              <CompactPreviewCard post={post} />
            </li>
          ))
        }
      </ul>
    }


    <PaginationButtons
      page={page}
      baseUrl={`/${category}`}
    />


  </div>
</PostCollectionLayout>
