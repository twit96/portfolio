---
import { type CollectionEntry, getCollection } from 'astro:content';
import PostCollectionLayout from '@layouts/PostCollectionLayout.astro';

export async function getStaticPaths() {
	const publishedPosts = (await getCollection('posts')).filter(post => !post.data.draft);
	const uniqueCategories = [];
	publishedPosts.forEach(post => {
		const postCategory = post.data.category;
		if (!uniqueCategories.includes(postCategory)) {
			uniqueCategories.push(postCategory);
		}
	});
	return uniqueCategories.map((category) => ({
		params: { postCategory: category },
		props: { posts: publishedPosts }
	}));
}
type Props = CollectionEntry<'posts'>;

const { postCategory } = Astro.params;
const { posts } = Astro.props;

// Remove Drafts
let publishedPosts = (await getCollection('posts')).filter(post => !post.data.draft);
let categorizedPosts = publishedPosts.filter(post => post.data.category===postCategory);
// Sort by Date Descending
categorizedPosts.sort(function(a, b) {
	let a_date = Date.parse(a.data.dateUpdated || a.data.datePublished);
  let b_date = Date.parse(b.data.dateUpdated || b.data.datePublished);
  if (b_date > a_date) return 1;
  if (a_date > b_date) return -1;
  return 0;
});

---

<PostCollectionLayout
	title={postCategory}
	posts={categorizedPosts}
>
</PostCollectionLayout>